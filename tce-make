#!/bin/sh
# tce-make: make tinycore extensions
# https://github.com/yiyus/tce-make
#
# -- Jesus Galan (yiyus) 2015

USAGE='Usage: tce-make [-h] [-b|-v] FILES...

Read one or more tcm files and generate (and, by default, runs) a
build script to generate .tar.gz.bfe files containing all the files needed
to submit the tinycore extension indicated in the tcm file.

The tcm file must contain fields as a .tcz.info file, with the following
particularities:

- Size is ignored, it is calculated from the tcz file
- A comment "Compiled from Core X.x", where X is the version of the
  current system, is added to Comments
- The current date is added before the Current comment

Additionally, some extra fields are supported in tcm files:

- Dependencies: dependencies to load the extension
- Git: download and decompress master.zip
- Build-deps: dependencies to build the extensions
-Make: commands to run before building extensions

Lines starting with # are ignored.

The commands in Make must fill the directory EXTENSION to build
EXTENSION.tcz and the corresponding EXTENSION.tar.gz.bfe file.

One extension is generated for each title in the tcm file. When a new
title is defined, the contents of all the info fields is inherited from
the previous one, but they can be redefined.

With -b, a .build script is generated, but not run. With -v, the
output of running the script is displayed on screen.'

if [ $# -lt 1 ] || [ "$1" == "-h" ]; then
	echo "$USAGE" 1>&2
	exit
fi

if [ "$1" = "-b" ]; then
	shift
	BUILDONLY=1
elif [ "$1" = "-v" ]; then
	shift
	VERBOSE=1
fi


if [ ! -f "$1" ] || [ ! -r "$1" ]; then
	echo "ERROR: cannot open $1" 1>&2
	exit 1
fi

tcm="${1##*/}"
name="${tcm%.tcm}"
build="$name".build

cat >"$build" <<'---Sh---'
#!/bin/sh
# Generated by tce-make

build="${0##*/}"
name="${build%.build}"

if [ "$1" != "-v" ]; then
	log="$name".log
	exec 3>&2 >"$log" 2>&1
	say() { echo "$@" 1>&3; }
	say "$log"
else
	say() { echo "$@" 1>&2; }
fi

tceload(){ tce="$1"
	tce-load -i "$tce" || tce-load -wi "$tce" || exit 1
}

gitmaster(){ url="$1"
	name="${url##*/}"
	wget -q "$url"/archive/master.zip -O "$name".zip \
		&& unzip -o "$name".zip || exit 1
}

packinfo(){ info="$1"
	dir="${info%.tcz.info}"
	tcz="$dir".tcz

	# make tcz
	if [ ! -d "$dir" ]; then
		say "ERROR: $dir/ not found. Cannot create $tcz"
		exit 1
	fi
	rm -f "$TCZ".tcz
	mksquashfs "$dir" "$tcz" -all-root && say "$tcz"

	# md5, list and info
	md5sum "$tcz" > "$tcz".md5.txt && say "$tcz".md5.txt
	(cd "$dir"; find * ! -type d) > "$tcz".list && say "$tcz".list
	sed '/^Size:/s,SIZE,'$(du "$tcz" | cut -f1)'K,
		/Compiled for Core X.x/s/X/'$(version | cut -d. -f1)'/
		/^Current:/s,YYYY/mm/dd,'$(date +%Y/%m/%d)',
	' -i "$info" && say "$info"

	# pack to .tar.gz.bfe
	tgz="$dir".tar.gz
	bfe="$tgz".bfe
	FILES="$tcz $tcz.info $tcz.list $tcz.md5.txt"
	for f in $FILES; do
		[ -f "$f" ] && continue
		say "ERROR: $f not found. Cannot create $bfe"
		exit 1
	done
	unset dep
	if [ -f "$tcz".dep ]; then
		dep="$tcz".dep
		say "$tcz".dep
	fi
	tar -zcvf "$tgz" $FILES ${dep:+"$dep"} && say "$tgz"
	echo -e 'tinycore\ntinycore\n' | bcrypt "$tgz" && say "$tgz".bfe
}

tceload squashfs-tools

---Sh---

# $1 should be a tcm file
/usr/bin/awk -f - "$1" >>"$build" <<'---Awk---' || exit 1

function tcm_info(tcm) {
	if(split(tcm["Title:"], title) == 0) return
	info = title[2]".info"
	infos[length(infos) + 1] = info
	print "cat >\""info"\" <<'---Info---'"
	for(i = 1; i <= length(fields); i++) {
		f = fields[i]
		txt = tcm[f":"]
		if(f == "Size") txt = sprintf("Size: %10sSIZE", "")
		else if(f == "Current") sub("^Current:[ \t]+", "&YYYY/mm/dd ", txt)
		print txt
		if(f == "Comments") {
			printf("%16s----\n", "")
			printf("%16sCompiled for Core X.x\n", "")
		}
	}
	print "---Info---"
	n = split(tcm["Dependencies:"], dep)
	if(n > 1) {
		print "cat >\""title[2]".dep\" <<'---Deps---'"
		for(i = 2; n >= 2 && i <= n; i++) print dep[i]
		print "---Deps---"
	}
}

function tcm_make(tcm) {
	tcm_info(tcm)
	if(split(tcm["Git:"], git) == 2) print "gitmaster", git[2]
	n = split(tcm["Build-deps:"], dep)
	for(i = 2; n >= 2 && i <= n; i++) print "tceload", dep[i]
	print "# Make commands:"
}

BEGIN{
	FIELDS="Title Description Version Author Original-site Copying-policy "\
		"Size Extension_by Tags Comments Change-log Current"
	split(FIELDS, fields)
}

(field == "Make:") {
	print
	next
}

/^[ \t]*(#.*)+$/ { next }

/^[A-Z][a-z_-]+:/ {
	field = $1
	if(field == "Title:") {
		tcm_info(tcm)
	} else if(field == "Make:") {
		tcm_make(tcm)
		sub("Make:[ \t]*", "")
		if($0 != "") print
		next
	}
	tcm[field] = $0
	next
}

/^[ \t]/ && (field != "") { tcm[field] = tcm[field]"\n"$0 }

END { for(i in infos) print "packinfo", infos[i] }

---Awk---

chmod +x "$build"
if [ -z "$BUILDONLY" ]; then
	./"$build" ${VERBOSE:+"-v"} || exit 1
fi

[ $# -eq 1 ] && exit
shift
echo
exec "$0" "$@"
