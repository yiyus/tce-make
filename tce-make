#!/bin/sh
# tce-make: make tinycore extensions
# https://github.com/yiyus/tce-make
#
# -- Jesus Galan (yiyus) 2015

USAGE='Usage: tce-make [-h] [-b|-v] FILES...

Read one or more tcm files and generate (and, by default, runs) a
build script to generate .tar.gz.bfe files containing all the files needed
to submit the tinycore extension indicated in the tcm file.

The tcm file must contain fields as a .tcz.info file, with the following
particularities:

- Size is ignored, it is calculated from the tcz file
- A comment "Compiled from Core X.x", where X is the version of the
  current system, is added to Comments
- The current date is added before the Current comment

Additionally, some extra fields are supported in tcm files:

- Dependencies: dependencies to load the extension
- Git: download and decompress master.zip
- Build-deps: dependencies to build the extensions
-Make: commands to run before building extensions

Lines starting with # are ignored.

The commands in Make must fill the directory EXTENSION to build
EXTENSION.tcz and the corresponding EXTENSION.tar.gz.bfe file.

One extension is generated for each title in the tcm file. When a new
title is defined, the contents of all the info fields is inherited from
the previous one, but they can be redefined.

With -b, a .build script is generated, but not run. With -v, the
output of running the script is displayed on screen.

Output files are created in $TCMDIR (default: /tmp/tcm).'

# Flags
if [ $# -lt 1 ] || [ "$1" == "-h" ]; then
	echo "$USAGE" 1>&2
	exit
elif [ "$1" = "-b" ]; then
	shift
	notbuild="-b"
elif [ "$1" = "-v" ]; then
	shift
	verbose="-v"
fi

# Check that input file can be read
if [ ! -f "$1" ] || [ ! -r "$1" ]; then
	echo "ERROR: cannot open $1" 1>&2
	exit 1
fi

# Create output directory
: ${TCMDIR:=/tmp/tcm}
[ -d "$TCMDIR" ] || mkdir -p "$TCMDIR" || exit 1

# File names
tcm="${1##*/}"
name="${tcm%.tcm}"
build="${TCMDIR}/$name".build # full path here

# Beginning of build shell script
cat >"$build" <<'---Sh---'
#!/bin/sh
# Generated by tce-make

build="${0##*/}"
name="${build%.build}"

# With quiet output, redirect stdout and stderr to log fine
# and 3 to stderr to be able to display messages with say
if [ ! "$1" == "-v" ]; then
	echo "${PWD}/$name".log 1>&2
	exec 3>&2 >"$name".log 2>&1
	stderr=3
fi

# Say that we created file, or that we failed and exit
say() { echo "$@" 1>&${stderr-2}; }
check() { what="${PWD}/$1"
	if [ ! -r "$what" ]; then
		say -n "ERROR: $what was not created"
		[ "$1" == "-v" ] && say || say " (see $log)"
		exit 1
	fi
	[ -d "$what" ] && what="${what%/}/"
	say "$what"
}

# Load extension, downloading if needed
tceload(){ tce="$1"
	tce-load -i "$tce" || tce-load -wi "$tce" || exit 1
}

# Get master.zip from git repository and unzip
gitmaster(){ url="$1"
	name="${url##*/}"
	wget -q "$url"/archive/master.zip -O "$name".zip \
		&& unzip -o "$name".zip || exit 1
}

# Pack everything for submission in a tar.gz.bfe file
packinfo(){ info="$1"
	dir="${info%.tcz.info}"
	tcz="$dir".tcz

	# make tcz
	check "$dir"
	rm -f "$tcz"
	mksquashfs "$dir" "$tcz" -all-root
	check "$tcz"

	# md5, list and info
	md5sum "$tcz" > "$tcz".md5.txt
	check "$tcz".md5.txt
	(cd "$dir"; find * ! -type d) > "$tcz".list
	check "$tcz".list
	sed '/^Size:/s,SIZE,'$(du "$tcz" | cut -f1)'K,
		/Compiled for Core X.x/s/X/'$(version | cut -d. -f1)'/
		/^Current:/s,YYYY/mm/dd,'$(date +%Y/%m/%d)',
	' -i "$info"
	check "$info"

	# pack to .tar.gz.bfe
	tgz="$dir".tar.gz
	bfe="$tgz".bfe
	FILES="$tcz $tcz.info $tcz.list $tcz.md5.txt"
	unset dep
	if [ -f "$tcz".dep ]; then
		FILES="$FILES $tcz".dep
		check "$tcz".dep
	fi
	tar -zcvf "$tgz" $FILES
	check "$tgz"
	echo -e 'tinycore\ntinycore\n' | bcrypt "$tgz"
	check "$tgz".bfe
}

tceload squashfs-tools # to create tcz files

---Sh---

/usr/bin/awk -f - "$1" >>"$build" <<'---Awk---' || exit 1

# Write commands for info file
function tcm_info(tcm) {
	if(split(tcm["Title:"], title) == 0) return
	info = title[2]".info"
	infos[length(infos) + 1] = info
	print "# Info file template (edited with sed later)"
	print "cat >\""info"\" <<'---Info---'"
	for(i = 1; i <= length(fields); i++) {
		f = fields[i]
		txt = tcm[f":"]
		if(f == "Size") txt = sprintf("Size: %10sSIZE", "")
		else if(f == "Current") sub("^Current:[ \t]+", "&YYYY/mm/dd ", txt)
		print txt
		if(f == "Comments") {
			printf("%16s----\n", "")
			printf("%16sCompiled for Core X.x\n", "")
		}
	}
	print "---Info---"
	n = split(tcm["Dependencies:"], dep)
	if(n > 1) {
		print "# Dependencies file"
		print "cat >\""title[2]".dep\" <<'---Deps---'"
		for(i = 2; n >= 2 && i <= n; i++) print dep[i]
		print "---Deps---"
	}
}

# Process custom commands
function tcm_make(tcm) {
	tcm_info(tcm)
	if(split(tcm["Git:"], git) == 2) print "gitmaster", git[2]
	n = split(tcm["Build-deps:"], dep)
	for(i = 2; n >= 2 && i <= n; i++) print "tceload", dep[i]
	print "# Make commands:"
}

BEGIN{
	FIELDS="Title Description Version Author Original-site Copying-policy "\
		"Size Extension_by Tags Comments Change-log Current"
	split(FIELDS, fields)
}

# Print Make commands verbatim
(field == "Make:") { print; next }

# Skip comments and whitespace
/^[ \t]*(#.*)+$/ { next }

# Set current field
/^[A-Z][a-z_-]+:/ {
	field = $1
	if(field == "Title:") {
		tcm_info(tcm) # print previous
	} else if(field == "Make:") {
		tcm_make(tcm)
		# there may be a command in the Make: line
		sub("Make:[ \t]*", "")
		if($0 != "") print
		next
	}
	tcm[field] = $0
	next
}

# Add to current field
/^[ \t]/ && (field != "") { tcm[field] = tcm[field]"\n"$0 }

# Print commands to pack an extenson for each info file
END { for(i in infos) print "packinfo", infos[i] }

---Awk---

# Build script done, make it executable
chmod +x "$build"
echo "${TCMDIR}/$name".build 1>&2

# Actually run the build script (unless opted out)
[ -n "$notbuild" ] || ( cd "$TCMDIR" && "$build" $verbose ) || exit 1

# If there are more files, exec again
if [ $# -gt 1 ]; then
	shift
	exec "$0" $notbuild $verbose "$@"
fi
